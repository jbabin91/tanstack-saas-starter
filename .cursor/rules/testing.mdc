---
description: Testing standards and practices using Vitest and related testing tools
globs: ['**/*.test.ts', '**/*.test.tsx', '**/*.spec.ts', '**/*.spec.tsx']
docs_path: 'docs/testing'
---

# Testing Standards

Follow the Testing Trophy hierarchy: Static → Unit → Integration → E2E.
See docs/testing/\* for detailed implementation examples.

## Core Principles

- Test user behavior, not implementation details
- Write isolated and deterministic tests
- Keep tests flat and avoid nesting
- Use `test` over `describe` and `it`
- Avoid shared setup/teardown
- Use `userEvent` over `fireEvent`
- Mock only external dependencies (MSW for API calls)
- Use type-safe data factories

## Query Selection

Priority order (highest to lowest):

1. `getByRole`
2. `getByLabelText`
3. `getByText`
4. `getByTestId` (avoid)

Query variants:

- Use `queryBy` for non-existence checks
- Use `findBy` for async elements
- Avoid `waitFor` for elements

## File Organization

- Place test files next to implementation
- Name pattern: `Component.test.tsx` or `Component.spec.tsx`
- Group test utilities in `__tests__/utils`
- Group factories in `__tests__/factories`

## Testing Patterns

DO:

- Test user interactions and behavior
- Write focused, single-purpose tests
- Test error states and edge cases
- Use realistic test data
- Keep assertions specific

DON'T:

- Test implementation details
- Use shared test setup
- Mock internal code
- Use snapshot tests
- Test library internals

## Documentation References

Refer to these docs for detailed examples and patterns:

- Static Analysis: docs/testing/static.md
- Unit Testing: docs/testing/unit.md
- Integration Testing: docs/testing/integration.md
- End-to-End Testing: docs/testing/e2e.md
