---
description: Core technology rules and standards for the TanStack SaaS Starter project
globs: ['src/**/*.ts', 'src/**/*.tsx']
---

# Core Technology Rules

## Project Structure

- Follow the established directory structure in `/src`
- Use kebab-case for component files
- Use kebab-case with dots for route files
- Use kebab-case for utility files
- Prefix demo files with `demo.`

## React Guidelines

- Use functional components with TypeScript
- Implement proper error boundaries
- Follow React 19 best practices
- Use hooks for state management and side effects

## JavaScript/TypeScript Standards

### Variables and References

- Use `const` by default, `let` only when reassignment is needed
- Never use `var`
- Use descriptive, clear names that explain purpose
- Use uppercase with underscores for true constants (e.g., `BASE_URL`)

### Objects and Arrays

- Use object/array literal syntax
- Use property shorthand when possible
- Use computed property names for dynamic properties
- Use object method shorthand
- Avoid accessors (getters/setters)
- Use `.filter(Boolean)` to remove falsey values
- Use array methods over loops
- Use non-mutative array methods when available
- Use spread operator for copying

### Functions

- Use function declarations over expressions
- Limit single-use functions
- Use default parameters over short-circuiting
- Return early to avoid deep nesting
- Use async/await over promise chains
- Use arrow functions for inline callbacks

### TypeScript Specifics

- Enable strict mode in tsconfig
- Use proper type annotations
- Avoid `any` type, prefer `unknown`
- Let TypeScript infer return types when possible
- Use type guards with type predicates
- Use schema validation (Zod) for external data
- Avoid type assertions (`as`)
- Use Array generic syntax (e.g., `Array<string>` over `string[]`)

## Code Style

- Use Prettier for code formatting
- Follow ESLint rules
- Use meaningful variable and function names
- Keep components focused and single-responsibility
- Document complex logic with comments
- Don't use semicolons unless necessary
- Use kebab-case for file names

## File Organization

- Group related components in feature directories
- Keep assets in `src/assets`
- Place reusable components in `src/components`
- Place reusable ui components in `src/components/ui`
- Place reusable contexts in `src/contexts`
- Place reusable hooks in `/src/hooks`
- Keep utility functions in `/src/lib`
- Keep global providers in `src/providers`
- Store API routes in `/src/routes/api`

### Feature File Organization

- Feature server functions in `src/features/feature-name/api`
- Feature components in `src/features/feature-name/components`
- Feature hooks in `src/feature/feature-name/hooks`
- Feature utility functions in `src/features/feature-name/lib`
- Feature providers/contexts in `src/features/feature-name/providers`
- Feature validation in `src/features/feature-name/validations`

## Best Practices

- Write unit tests for critical functionality
- Use proper error handling
- Implement proper TypeScript types
- Follow conventional commits
- Document public APIs and components
- Use early returns
- Keep code DRY but not at the expense of clarity
- Follow the principle of least surprise

## File Naming

- Use kebab-case for all regular files and directories
- Special cases for routes:
  - Root layout: `__root.tsx`
  - Index pages: `index.tsx`
  - Layout/parent routes: `route.tsx`
  - Pathless directories: Prefix with `_` (e.g., `_app`, `_public`)
  - Dynamic parameters: Use `$` prefix (e.g., `users.$userId.tsx`)
- Test files match their implementation file's case with `.test` or `.spec` suffix
- Always use kebab-case in import paths
- See docs/core/code-style.md for detailed examples

Example structure:

```sh
src/
  components/
    user-profile/
      user-avatar.tsx
      user-details.tsx
  routes/
    __root.tsx
    index.tsx
    _app/
      route.tsx
      dashboard.tsx
    users/
      $userId.tsx
  utils/
    string-helpers.ts
```
